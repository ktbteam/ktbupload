name: KTB Image Upload

on:
  repository_dispatch:
    types: [upload-zip]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  # JOB 1: Đọc config (Không thay đổi)
  setup:
    runs-on: ubuntu-latest
    outputs:
      sites_matrix: ${{ steps.set_matrix.outputs.sites }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Read sites config and set matrix
        id: set_matrix
        run: |
          SITES_JSON=$(jq -c '.sites' config.json)
          echo "sites=${SITES_JSON}" >> $GITHUB_OUTPUT

  # JOB 2: Upload file (Không thay đổi)
  # Script upload-script.js giờ đã đủ thông minh để xử lý key từ secrets
  upload:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        site: ${{ fromJson(needs.setup.outputs.sites_matrix) }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Checkout ktb-image repo
        uses: actions/checkout@v4
        with:
          repository: ktbhub/ktb-image
          path: ktb-image
          token: ${{ secrets.KTBHUB_PAT }}
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Upload and Process for ${{ matrix.site.slug }}
        id: upload_process
        env:
          SITE_CONFIG_JSON: ${{ toJSON(matrix.site) }}
          KTBTEE_VPS_HOST: ${{ secrets.KTBTEE_VPS_HOST }}
          KTBTEE_VPS_USERNAME: ${{ secrets.KTBTEE_VPS_USERNAME }}
          KTBTEE_SSH_PRIVATE_KEY: ${{ secrets.KTBTEE_SSH_PRIVATE_KEY }}
          KTBTEE_VPS_PORT: ${{ secrets.KTBTEE_VPS_PORT }}
          WHATWILLWEAR_VPS_HOST: ${{ secrets.WHATWILLWEAR_VPS_HOST }}
          WHATWILLWEAR_VPS_USERNAME: ${{ secrets.WHATWILLWEAR_VPS_USERNAME }}
          WHATWILLWEAR_SSH_PRIVATE_KEY: ${{ secrets.WHATWILLWEAR_SSH_PRIVATE_KEY }}
          WHATWILLWEAR_VPS_PORT: ${{ secrets.WHATWILLWEAR_VPS_PORT }}
          AMERTEE_VPS_HOST: ${{ secrets.AMERTEE_VPS_HOST }}
          AMERTEE_VPS_USERNAME: ${{ secrets.AMERTEE_VPS_USERNAME }}
          AMERTEE_SSH_PRIVATE_KEY: ${{ secrets.AMERTEE_SSH_PRIVATE_KEY }}
          AMERTEE_VPS_PORT: ${{ secrets.AMERTEE_VPS_PORT }}
          PRINTIMENT_VPS_HOST: ${{ secrets.PRINTIMENT_VPS_HOST }}
          PRINTIMENT_VPS_USERNAME: ${{ secrets.PRINTIMENT_VPS_USERNAME }}
          PRINTIMENT_SSH_PRIVATE_KEY: ${{ secrets.PRINTIMENT_SSH_PRIVATE_KEY }}
          PRINTIMENT_VPS_PORT: ${{ secrets.PRINTIMENT_VPS_PORT }}
          ALBUMCOVERPRINT_VPS_HOST: ${{ secrets.ALBUMCOVERPRINT_VPS_HOST }}
          ALBUMCOVERPRINT_VPS_USERNAME: ${{ secrets.ALBUMCOVERPRINT_VPS_USERNAME }}
          ALBUMCOVERPRINT_SSH_PRIVATE_KEY: ${{ secrets.ALBUMCOVERPRINT_SSH_PRIVATE_KEY }}
          ALBUMCOVERPRINT_VPS_PORT: ${{ secrets.ALBUMCOVERPRINT_VPS_PORT }}
        run: node upload-script.js
      - name: Archive report file
        if: success() && steps.upload_process.outputs.uploaded_count > 0
        uses: actions/upload-artifact@v4
        with:
          name: report-${{ matrix.site.slug }}
          path: ${{ matrix.site.slug }}_report.txt

  # JOB 3: Báo cáo (Đã cập nhật để nhất quán với PC)
  report:
    needs: upload
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Dùng token mặc định của Actions để push

      - name: Download all report files
        uses: actions/download-artifact@v4
        with:
          pattern: report-*
          path: all-reports
          if-no-files-found: warn
      
      # Thêm bước cài đặt Node.js cho job này
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Generate Log, Send Report, and Commit
        env:
          # Cung cấp các biến môi trường cho cả script Node.js và Git
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        run: |
          # 1. Tạo file upload.log
          # Dùng script get-timestamp.js để nhất quán với PC
          TIMESTAMP=$(node get-timestamp.js)
          echo -e "--- Summary of Last Upload ---\nTimestamp: $TIMESTAMP\n" > upload.log

          AGGREGATED_REPORT_FILES=$(find all-reports -type f -name "*.txt" 2>/dev/null)
          if [ -n "$AGGREGATED_REPORT_FILES" ]; then
              for report_file in $AGGREGATED_REPORT_FILES; do
                  cat "$report_file" >> upload.log
                  echo "" >> upload.log
              done
              sed -i '${/^\s*$/d;}' upload.log
              echo -e "\n\nUpload thành công." >> upload.log
          else
              echo "Upload thất bại." >> upload.log
          fi
          
          echo "--- Final log content ---"
          cat upload.log
          echo "-------------------------"

          # 2. Gửi nội dung log qua Telegram bằng script Node.js
          echo "Sending report via Telegram..."
          node send-telegram.js

          # 3. Commit file upload.log mới
          echo "Committing upload.log..."
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add upload.log
          if ! git diff --staged --quiet; then
              git commit -m "Update upload.log for new run"
              # Pull rebase để tránh xung đột
              git pull --rebase
              git push
          else
              echo "No changes to upload.log to commit."
          fi