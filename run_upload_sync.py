import os
import json
import subprocess
import re
import sys
import time
import glob
import io
from datetime import datetime
from zoneinfo import ZoneInfo  # Y√™u c·∫ßu Python 3.9+
import paramiko
import requests
from dotenv import load_dotenv
import shlex

# --- C·∫•u h√¨nh chung ---
# ƒê·ªïi 'nginx' n·∫øu user web server c·ªßa b·∫°n kh√°c
WEB_USER = "nginx" 
# ƒê·ªïi '/usr/local/bin/wp' n·∫øu ƒë∆∞·ªùng d·∫´n WP-CLI c·ªßa b·∫°n kh√°c
WP_CLI_PATH = "/usr/local/bin/wp" 

# ƒê∆∞·ªùng d·∫´n (gi·ªëng run-local.sh)
KTB_IMAGE_PATH = "../ktbproject/ktbimage"
CONFIG_FILE = 'config.json'
LOG_FILE = 'upload.log'
TEMP_SCRIPT_NAME = 'temp_remote_script.py.sh'

# --- 1. Logic Upload (Thay th·∫ø upload-script.js) ---

# (T√¨m h√†m n√†y trong file run_upload_sync.py v√† thay th·∫ø n√≥)

def get_ssh_key(prefix): # prefix s·∫Ω l√† "KTBTEE", "AMERTEE"...
    """L·∫•y PKey (∆Øu ti√™n key ri√™ng c·ªßa admin, sau ƒë√≥ l√† m·∫∑c ƒë·ªãnh c·ªßa admin)"""

    # 1. ∆Øu ti√™n t√¨m key ri√™ng (v√≠ d·ª•: ADMIN_KTBTEE_SSH_PRIVATE_KEY_PATH)
    key_path = os.getenv(f"ADMIN_{prefix}_SSH_PRIVATE_KEY_PATH")
    key_content = os.getenv(f"ADMIN_{prefix}_SSH_PRIVATE_KEY")

    # 2. N·∫øu kh√¥ng th·∫•y, t√¨m key m·∫∑c ƒë·ªãnh
    if not key_path and not key_content:
        key_path = os.getenv("DEFAULT_ADMIN_SSH_KEY_PATH")
        key_content = os.getenv("DEFAULT_ADMIN_SSH_PRIVATE_KEY")
    
    if key_path:
        # --- S·ª¨A L·ªñI ·ªû ƒê√ÇY ---
        # 1. Lu√¥n "hi·ªÉu" k√Ω t·ª± ~ (th∆∞ m·ª•c nh√†)
        key_path = os.path.expanduser(key_path)
        
        # 2. D·ªãch ƒë∆∞·ªùng d·∫´n Git Bash (/c/) sang ƒë∆∞·ªùng d·∫´n Windows (C:/)
        # Ch·ªâ l√†m ƒëi·ªÅu n√†y n·∫øu ch√∫ng ta ƒëang ch·∫°y tr√™n Windows
        if os.name == 'nt':
            if key_path.startswith('/c/'):
                key_path = 'C:/' + key_path[3:]
            elif key_path.startswith('/d/'):
                key_path = 'D:/' + key_path[3:]
            elif key_path.startswith('/e/'):
                key_path = 'E:/' + key_path[3:]
            # (B·∫°n c√≥ th·ªÉ th√™m c√°c ·ªï ƒëƒ©a kh√°c n·∫øu c·∫ßn)
        
        # --- K·∫æT TH√öC S·ª¨A L·ªñI ---
        
        print(f"Su dung SSH Key tu duong dan (da xu ly): {key_path}")
        
        # Th√™m ki·ªÉm tra file t·ªìn t·∫°i ƒë·ªÉ b√°o l·ªói r√µ h∆°n
        if not os.path.exists(key_path):
            raise FileNotFoundError(f"Khong tim thay file key tai: {key_path}")
            
        # S·ª≠a l·ªói: Ph·∫£i d√πng PKey.from_private_key_file thay v√¨ RSAKey
        # ƒêi·ªÅu n√†y h·ªó tr·ª£ c·∫£ key ed25519 v√† rsa
        try:
             # Th·ª≠ t·∫£i key ed25519 tr∆∞·ªõc
            return paramiko.Ed25519Key.from_private_key_file(key_path)
        except paramiko.ssh_exception.SSHException:
            try:
                # N·∫øu th·∫•t b·∫°i, th·ª≠ t·∫£i key RSA
                return paramiko.RSAKey.from_private_key_file(key_path)
            except paramiko.ssh_exception.SSHException:
                 # Th√™m c√°c lo·∫°i key kh√°c n·∫øu c·∫ßn (v√≠ d·ª•: ecdsa)
                print("Loi: Khong the tai key. Chi ho tro RSA hoac Ed25519.")
                raise
    
    elif key_content:
        print("Su dung SSH Key tu noi dung .env")
        key_file_obj = io.StringIO(key_content)
        # S·ª≠a t∆∞∆°ng t·ª± ·ªü ƒë√¢y
        try:
            return paramiko.Ed25519Key.from_private_key(key_file_obj)
        except paramiko.ssh_exception.SSHException:
            try:
                return paramiko.RSAKey.from_private_key(key_file_obj)
            except paramiko.ssh_exception.SSHException:
                print("Loi: Khong the tai key. Chi ho tro RSA hoac Ed25519.")
                raise
    else:
        raise ValueError(f"Thieu SSH_PRIVATE_KEY_PATH hoac SSH_PRIVATE_KEY cho prefix {prefix}")

def process_site(site_config):
    """
    K·∫øt n·ªëi, upload, v√† ch·∫°y script remote cho 1 site.
    Tr·∫£ v·ªÅ t·ªïng s·ªë ·∫£nh ƒë√£ upload th√†nh c√¥ng.
    """
    slug = site_config['slug']
    prefix = site_config['prefix']
    vps_prefix = site_config['vps_secret_prefix']
    
    print("\n" + "="*50)
    print(f"üöÄ Bat dau xu ly cho trang: {slug}")
    
    # L·∫•y th√¥ng tin SSH t·ª´ .env
    try:
        ssh_key = get_ssh_key(vps_prefix)
        vps_host = os.getenv(f"{vps_prefix}_VPS_HOST")
        vps_user = (
        os.getenv(f"ADMIN_{vps_prefix}_VPS_USERNAME") or  # e.g., ADMIN_KTBTEE_VPS_USERNAME
        os.getenv("DEFAULT_ADMIN_VPS_USERNAME")         # e.g., "khue"
        )
        vps_port = int(os.getenv(f"{vps_prefix}_VPS_PORT"))
        if not all([vps_host, vps_user, vps_port]):
            raise ValueError(f"Thieu _HOST, _USERNAME, hoac _PORT cho prefix {vps_prefix}")
    except Exception as e:
        print(f"‚ùå Loi cau hinh SSH cho {slug}: {e}")
        return 0

    # T√¨m file Zip
    zips_directory = os.path.join(KTB_IMAGE_PATH, 'OutputImage')
    if not os.path.isdir(zips_directory):
        print(f"‚ùå Loi: Khong tim thay thu muc {zips_directory}")
        return 0
    
    all_zips = [f for f in os.listdir(zips_directory) if f.endswith('.zip') and f.startswith(prefix)]
    
    # ƒê·ªçc log file ƒë√£ upload
    uploaded_log_file = f"uploaded_files_{slug}.log"
    logged_files = set()
    if os.path.exists(uploaded_log_file):
        with open(uploaded_log_file, 'r', encoding='utf-8') as f:
            logged_files = set(f.read().splitlines())

    total_images_uploaded = 0
    
    for filename in all_zips:
        if filename in logged_files:
            print(f"Skipping {filename}, da upload.")
            continue

        print(f"\n--- Xu ly file: {filename} ---")
        local_zip_path = os.path.join(zips_directory, filename)
        remote_temp_dir = f"/tmp/upload_{slug}_{int(time.time())}"
        remote_zip_path = f"{remote_temp_dir}/{filename}"
        remote_script_path = f"{remote_temp_dir}/{TEMP_SCRIPT_NAME}"
        
        ssh = None
        try:
            # K·∫øt n·ªëi SSH
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect(vps_host, port=vps_port, username=vps_user, pkey=ssh_key, timeout=10)
            
            # 1. T·∫°o th∆∞ m·ª•c t·∫°m v√† Upload file zip (SFTP)
            print(f"Dang upload {filename} len {slug}...")
            sftp = ssh.open_sftp()
            sftp.mkdir(remote_temp_dir)
            sftp.put(local_zip_path, remote_zip_path)
            sftp.close()
            print("‚úÖ Upload file zip thanh cong.")

            # 2. ƒê·∫øm ·∫£nh b·∫±ng unzip -l
            print("Dang dem anh trong file zip tren server...")
            count_cmd = f"unzip -l {shlex.quote(remote_zip_path)} | grep -Eic '(\\.webp|\\.jpg|\\.png)$' || echo 0"
            stdin, stdout, stderr = ssh.exec_command(count_cmd)
            image_count = int(stdout.read().decode('utf-8').strip())
            print(f"   File chua {image_count} anh.")

            # 3. T·∫°o v√† ch·∫°y script remote (Copy 1-1 t·ª´ JS)
            remote_command = f"""#!/bin/bash
              set -e
              shopt -s nullglob
              
              function cleanup {{
                echo "Don dep {remote_temp_dir}..."
                rm -rf {remote_temp_dir}
              }}
              trap cleanup EXIT

              chmod 755 "{remote_temp_dir}"
              cd {remote_temp_dir}
              unzip -o '{filename}' -d extracted_images
              chmod -R 755 extracted_images

              echo "Import vao {site_config['wp_path']} voi author {site_config['wp_author']}..."
              cd {site_config['wp_path']}
              sudo -u {WEB_USER} {WP_CLI_PATH} media import {remote_temp_dir}/extracted_images/*.{{webp,jpg,png}} --user={site_config['wp_author']}
              
              echo "--- Hoan thanh xu ly {filename} ---"
            """
            
            # Ghi script t·∫°m ra local v√† upload n√≥
            with open(TEMP_SCRIPT_NAME, 'w', encoding='utf-8', newline='\n') as f:
                f.write(remote_command)
            
            sftp = ssh.open_sftp()
            sftp.put(TEMP_SCRIPT_NAME, remote_script_path)
            sftp.chmod(remote_script_path, 0o755) # C·∫•p quy·ªÅn ch·∫°y
            sftp.close()
            
            print("Dang chay script import remote...")
            stdin, stdout, stderr = ssh.exec_command(f"bash {remote_script_path}")
            print(stdout.read().decode('utf-8')) # In output c·ªßa script remote
            print(stderr.read().decode('utf-8')) # In l·ªói n·∫øu c√≥

            # 4. Ghi log th√†nh c√¥ng
            with open(uploaded_log_file, 'a', encoding='utf-8') as f:
                f.write(f"{filename}\n")
            
            total_images_uploaded += image_count
            print(f"‚úÖ Finished importing {filename} to {slug}.")

        except Exception as e:
            print(f"‚ùå Failed to upload {filename} to {slug}: {e}")
            # C·ªë g·∫Øng d·ªçn d·∫πp th∆∞ m·ª•c t·∫°m tr√™n VPS
            try:
                ssh.exec_command(f"rm -rf {remote_temp_dir}")
            except:
                pass # B·ªè qua l·ªói d·ªçn d·∫πp
        finally:
            if ssh:
                ssh.close()
            print("--- Tam nghi 5 giay ---")
            time.sleep(5)
            
    return total_images_uploaded

# --- 2. Logic B√°o c√°o (Thay th·∫ø generate-report.js) ---

def get_previous_totals(log_file):
    """ƒê·ªçc upload.log c≈©, tr·∫£ v·ªÅ (totals_dict, log_date_str)"""
    totals = {}
    log_date = None
    if not os.path.exists(log_file):
        return totals, log_date

    date_regex = re.compile(r"^Timestamp: (\d{4}-\d{2}-\d{2})")
    stats_regex = re.compile(r"^(.*?):.*?Total (\d+)$")

    with open(log_file, 'r', encoding='utf-8') as f:
        for line in f:
            date_match = date_regex.search(line)
            if date_match:
                log_date = date_match.group(1)
            
            stats_match = stats_regex.search(line)
            if stats_match:
                prefix = stats_match.group(1).strip()
                count = int(stats_match.group(2))
                totals[prefix] = count
    return totals, log_date

def generate_report(newly_uploaded_counts):
    """T·∫°o file upload.log m·ªõi d·ª±a tr√™n logic reset theo ng√†y"""
    print("\n" + "="*50)
    print("üìä Dang tao bao cao tong hop...")

    previous_totals, log_date = get_previous_totals(LOG_FILE)
    
    try:
        current_date = datetime.now(ZoneInfo("Asia/Ho_Chi_Minh")).strftime('%Y-%m-%d')
        current_timestamp = datetime.now(ZoneInfo("Asia/Ho_Chi_Minh")).strftime('%Y-%m-%d %H:%M:%S %z')
    except Exception as e:
        print(f"Loi ZoneInfo (can Python 3.9+): {e}. Su dung gio he thong.")
        current_date = datetime.now().strftime('%Y-%m-%d')
        current_timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    final_totals = {}
    if log_date == current_date:
        print(f"Ngay trong log ({log_date}) trung khop. Tiep tuc cong don...")
        final_totals = previous_totals.copy()
    else:
        print(f"Ngay trong log ({log_date}) khac voi hom nay ({current_date}). Reset thong ke.")
        # final_totals v·∫´n l√† {} r·ªóng

    # T·ªïng h·ª£p t·∫•t c·∫£ c√°c prefix
    all_prefixes = sorted(list(set(final_totals.keys()) | set(newly_uploaded_counts.keys())))
    
    new_log_content = f"--- Summary of Last Upload ---\nTimestamp: {current_timestamp}\n\n"
    
    # T√≠nh t·ªïng s·ªë ·∫£nh M·ªöI ƒë√£ upload
    total_new_images = sum(newly_uploaded_counts.values())
    
    if not all_prefixes:
        new_log_content += "Upload that bai hoac khong co file moi."
    else:
        for prefix in all_prefixes:
            old_total = final_totals.get(prefix, 0)
            new_count = newly_uploaded_counts.get(prefix, 0)
            current_total = old_total + new_count
            new_log_content += f"{prefix}: {new_count} images: Total {current_total}\n"
        
        # S·ª¨A LOGIC ·ªû ƒê√ÇY
        if total_new_images > 0:
            new_log_content += "\nUpload thanh cong."
        else:
            # N·∫øu kh√¥ng c√≥ ·∫£nh M·ªöI n√†o, v√† kh√¥ng c√≥ ·∫£nh C≈® n√†o (tr∆∞·ªùng h·ª£p reset/l·ªói)
            if not previous_totals:
                 new_log_content += "\nUpload THAT BAI (Co the do loi cau hinh SSH)."
            else:
                 new_log_content += "\nKhong co file moi nao duoc upload."

    with open(LOG_FILE, 'w', encoding='utf-8') as f:
        f.write(new_log_content)
    
    print("Da ghi file upload.log")
    print("--- Noi dung bao cao ---")
    print(new_log_content)
    print("------------------------")

# --- 3. Logic G·ª≠i Telegram (Thay th·∫ø send-telegram.js) ---

def send_telegram_report():
    """ƒê·ªçc upload.log v√† g·ª≠i qua Telegram"""
    print("\n" + "="*50)
    print("üì§ Dang gui thong bao Telegram...")

    try:
        with open(LOG_FILE, 'r', encoding='utf-8') as f:
            log_content = f.read()
    except FileNotFoundError:
        print(f"Loi: Khong tim thay {LOG_FILE} de gui.")
        return

    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    chat_id = os.getenv('TELEGRAM_CHAT_ID_NU')

    if not bot_token or not chat_id:
        print("Loi: Thieu TELEGRAM_BOT_TOKEN hoac TELEGRAM_CHAT_ID trong .env")
        return

    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {'chat_id': chat_id, 'text': log_content}

    try:
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()
        print(f"‚úÖ Da gui thong bao qua Telegram. (Response: {response.json().get('ok', 'Failed')})")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Loi khi gui request den Telegram: {e}")

# --- 4. Logic Git Push (T·ª´ run-local.sh) ---

def sync_git_repo():
    """ƒê·ªìng b·ªô repo l√™n GitHub"""
    print("\n" + "="*50)
    print("üîÑ Bat dau dong bo hoa repo 'ktbupload' voi GitHub...")
    
    if not os.getenv('KTBGIT_PAT'):
        print(" Loi: Bien KTBGIT_PAT khong duoc thiet lap trong file .env. Bo qua git push.")
        return

    try:
        subprocess.run(['git', 'config', 'user.name', 'automation-bot'], check=True)
        subprocess.run(['git', 'config', 'user.email', 'bot@example.com'], check=True)
        subprocess.run(['git', 'add', '.'], check=True)
        
        # Ki·ªÉm tra xem c√≥ g√¨ thay ƒë·ªïi kh√¥ng
        result = subprocess.run(['git', 'diff', '--staged', '--quiet'])
        if result.returncode == 0:
            print("üëå Khong co thay doi nao de commit.")
            return

        print("üìù Co thay doi, dang tien hanh commit...")
        subprocess.run(['git', 'commit', '--amend', '--no-edit'], check=True)
        
        # L·∫•y branch hi·ªán t·∫°i
        branch_result = subprocess.run(['git', 'rev-parse', '--abbrev-ref', 'HEAD'], capture_output=True, text=True, check=True)
        current_branch = branch_result.stdout.strip()
        
        print(f"üì§ Dang push len branch '{current_branch}' qua SSH...")
        subprocess.run(['git', 'push', 'origin', current_branch, '--force'], check=True)
        print("‚ú® Dong bo hoa thanh cong!")

    except subprocess.CalledProcessError as e:
        print(f"‚ùå Loi khi dong bo Git: {e}")
    except FileNotFoundError:
        print("‚ùå Loi: Khong tim thay lenh 'git'. Vui long cai dat Git.")

# --- 5. Logic D·ªçn d·∫πp (T·ª´ run-local.sh) ---

def cleanup_temp_files():
    """X√≥a c√°c file t·∫°m sau khi ch·∫°y"""
    print("\n" + "="*50)
    print("üßπ Don dep cac file log va report tam...")
    
    # X√≥a file report (d√π script n√†y ko t·∫°o ra, nh∆∞ng ƒë·ªÉ cho ch·∫Øc)
    for f in glob.glob('*_report.txt'):
        os.remove(f)
    
    # X√≥a file log chi ti·∫øt c·ªßa t·ª´ng site
    for f in glob.glob('uploaded_files_*.log'):
        os.remove(f)
    
    # X√≥a script t·∫°m ƒë√£ upload
    if os.path.exists(TEMP_SCRIPT_NAME):
        os.remove(TEMP_SCRIPT_NAME)
        
    print("‚úÖ Don dep hoan tat.")

# --- H√†m ch·∫°y ch√≠nh (Thay th·∫ø run-local.sh) ---

def main():
    print("--- Bat dau quy trinh Upload Local (Python Version) ---")
    
    # 1. T·∫£i .env
    if not os.path.exists('.env'):
        print("Loi: File .env khong ton tai.")
        sys.exit(1)
    load_dotenv()
    
    # 2. T·∫£i config.json
    try:
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            config = json.load(f)
    except FileNotFoundError:
        print(f"Loi: File {CONFIG_FILE} khong ton tai.")
        sys.exit(1)

    # 3. Ch·∫°y upload cho t·ª´ng site v√† thu th·∫≠p k·∫øt qu·∫£
    newly_uploaded_counts = {}
    for site in config.get('sites', []):
        new_count = process_site(site)
        prefix = site['prefix']
        current_count = newly_uploaded_counts.get(prefix, 0)
        newly_uploaded_counts[prefix] = current_count + new_count
    
    # 4. T·∫°o b√°o c√°o
    generate_report(newly_uploaded_counts)
    
    # 5. G·ª≠i Telegram
    send_telegram_report()
    
    # 6. ƒê·ªìng b·ªô Git
    #sync_git_repo()
    
    # 7. D·ªçn d·∫πp
    cleanup_temp_files()
    
    print("\n--- Hoan tat toan bo quy trinh KTB-Upload ---")

if __name__ == "__main__":
    main()